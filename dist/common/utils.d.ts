export declare const property: (prop: string) => (obj: object) => any;
export declare const forEach: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => void) => void;
export declare function map<T, R>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => R): R[];
export declare const filter: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean) => ArrayLike<T>;
export declare const find: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean) => T | undefined;
export declare const findIndex: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean) => number;
export declare const includes: <T>(list: ArrayLike<T>, item: T) => boolean;
export declare const every: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean) => boolean;
export declare const some: <T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean) => boolean;
export declare const propertyEq: (prop: string, value: any) => (obj: object) => boolean;
export declare function findLast<T>(list: ArrayLike<T>, fn: (item: T, index: number, list: ArrayLike<T>) => boolean): T | undefined;
export declare function padLeft(ch: string, n: number, str: string): string;
export declare function padRight(ch: string, n: number, str: string): string;
export declare function round(x: number, digits?: number): number;
export declare function camelCase(str: string): string;
export declare function kebabCase(str: string): string;
export declare function capitalize(str: string): string;
export declare function range(start: number, end: number): number[];
export declare function isEmpty(obj: object): boolean;
export declare function uniq<T>(list: T[]): T[];
export declare const uniqBy: <T>(fn: (item: T) => any, list: ArrayLike<T>) => T[];
export declare function merge(output: Record<string, any> | Array<any>, to: Record<string, any> | Array<any>, from?: Record<string, any> | Array<any>): any[] | Record<string, any>;
type Nested<T> = Array<T | Nested<T>>;
export declare function flatten<T>(list?: Nested<T>): T[];
export {};
